// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Decode c instruction. Control bits.
    Mux(a=false, b=instruction[12], sel=instruction[15], out=cA);
    Mux(a=false, b=instruction[11], sel=instruction[15], out=cC1);
    Mux(a=false, b=instruction[10], sel=instruction[15], out=cC2);
    Mux(a=false, b=instruction[9], sel=instruction[15], out=cC3);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=cC4);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=cC5);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=cC6);
    Mux(a=false, b=instruction[5], sel=instruction[15], out=cD1);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=cD2);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=cD3);
    Mux(a=false, b=instruction[2], sel=instruction[15], out=cJ1);
    Mux(a=false, b=instruction[1], sel=instruction[15], out=cJ2);
    Mux(a=false, b=instruction[0], sel=instruction[15], out=cJ3);

    // is c instruction or loading constant into A reg val.
    Mux16(a=instruction, b=aluOutput, sel=instruction[15], out=newARegVal);

    // d1
    // d1 is 1 or instr[15]=0.
    Not(in=instruction[15], out=isA);
    Or(a=cD1, b=isA, out=shouldLoadA);
    ARegister(in=newARegVal, load=shouldLoadA, out=aRegVal);

    DRegister(in=aluOutput, load=cD2, out=dRegVal);

    // d2 
    Mux16(a=aRegVal, b=inM, sel=cA, out=aORm);

    ALU(x=dRegVal, y=aORm, zx=cC1, nx=cC2, zy=cC3, ny=cC4, f=cC5, no=cC6, out=aluOutput, zr=zr, ng=ng);

    
    // // j1 out < 0
    And(a=cJ1, b=ng, out=j1);

    // // j2 out = 0
    And(a=cJ2, b=zr, out=j2);

    // // j3 out > 0
    Not(in=zr, out=notZR);
    Not(in=ng, out=notNG);
    And(a=notZR, b=notNG, out=isPos);
    And(a=cJ3, b=isPos, out=j3);

    // // outputs
    Mux16(a=aRegVal, b[0..15]=false, sel=false, out[0..14]=addressM);

    Mux(a=cD3, b=false, sel=false, out=writeM); //pipe d3 -> writeM
    Mux16(a=aluOutput, b[0..15]=false, sel=false, out=outM); //pipe ALU output-> outM

    //  j123 is 1 if any of j1,j2,j3 =1.
    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=j123);

    // Not(in=j123, out=shouldIncrement);
    PC(in=aRegVal, load=j123, inc=true, reset=reset, out[0..14]=pc);
}